// ********RoostGPT********
// Test generated by RoostGPT for test checkNodejsDepsInstalled using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
const request = require('supertest');
const mongoose = require('mongoose');
const Todo = require('./todo.model');
let server;

describe('/update/:id', () => {
  beforeEach(() => { 
    server = require('./server'); 
    app.use(bodyParser.json());
  });
  afterEach(async () => { 
    server.close(); 
    await Todo.remove({});
  });

  describe('POST /', () => {
    it('should return 404 if todo not found', async () => {
      const id = mongoose.Types.ObjectId();
      const res = await request(server).post('/update/' + id);
      expect(res.status).toBe(404);
    });

    it('should return 400 if update not possible', async () => {
      const todo = new Todo({
        todo_description: 'Test description',
        todo_responsible: 'Test responsible',
        todo_priority: 'Test priority',
        todo_completed: false
      });
      await todo.save();

      todo.todo_description = '';
      const res = await request(server).post('/update/' + todo._id).send(todo);
      expect(res.status).toBe(400);
    });

    it('should update the todo if input is valid', async () => {
      const todo = new Todo({
        todo_description: 'Test description',
        todo_responsible: 'Test responsible',
        todo_priority: 'Test priority',
        todo_completed: false
      });
      await todo.save();

      todo.todo_description = 'Updated description';
      const res = await request(server).post('/update/' + todo._id).send(todo);

      const updatedTodo = await Todo.findById(todo._id);
      expect(updatedTodo.todo_description).toBe('Updated description');
    });
  });
});
